{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAOA,MAAMC,EAAOC,SAASC,cAAc,QAC9BC,EAAMF,SAASC,cAAc,UAQnCF,EAAKI,iBAAiB,UAsBtB,SAAoBC,GAClBF,EAAIG,aAAa,WAAY,YAC7BD,EAAIE,iBAKkD,MACpDC,UAAYC,MAAAC,EAAKC,KAAEA,EAAIC,OAAEA,IACvBP,EAAIQ,cAER,IAAIC,EAAWC,OAAOL,EAAMM,OACxBC,EAAUF,OAAOJ,EAAKK,OACtBE,EAAYH,OAAOH,EAAOI,OAC1BG,EAAI,EAIsB,MAAxBC,EAAaC,aAAY,KAhCjC,IAAuBC,EAAUb,EAiC7BU,GAAK,EACDA,IAAMD,IACRK,cAAcH,GAG4BI,YAA/B,KACTrB,EAAIsB,gBAAgB,WAAW,GAC9B,OAxCcH,EA0CLH,EA1CeV,EA0CZK,EAzCZ,IAAIY,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GAEtCP,YAAW,KACLK,EACFF,EAAQ,C,SAAEL,E,MAAUb,IAEpBmB,EAAO,C,SAAEN,E,MAAUb,GAAQ,GAE5BA,EAAM,KAiCNuB,MAAK,EAACV,SAAEA,EAAQb,MAAEA,MACjBX,EAAAmC,OAAOC,QAAQ,uBAAqBZ,QAAiBb,MAAU,IAEhE0B,OAAM,EAACb,SAAEA,EAAQb,MAAEA,MAClBX,EAAAmC,OAAOG,QAAQ,sBAAoBd,QAAeb,MAAU,GAC5D,GACHQ,E","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\n/**\n  |============================\n  | Змінні\n  |============================\n*/\nconst form = document.querySelector('form');\nconst btn = document.querySelector('button');\n\n/**\n  |============================\n  | Слухачі\n  |============================\n*/\n\nform.addEventListener('submit', formSubmit);\n\n/**\n  |============================\n  | Функції\n  |============================\n*/\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nfunction formSubmit(evt) {\n  btn.setAttribute('disabled', 'disabled');\n  evt.preventDefault();\n\n  // Питання! Нижче об`єкт - elements. Як йому передаються ключі delay, step, amount, та як JS розуміє де які елементи\n  // привязати до ключів. Я знаю шо так можна, але ж не зрозумілі правила.\n\n  const {\n    elements: { delay, step, amount },\n  } = evt.currentTarget;\n\n  let numDalay = Number(delay.value);\n  let numStep = Number(step.value);\n  let numAmount = Number(amount.value);\n  let i = 0;\n\n  // Також можна зробити лічілник через \"for\"\n\n  const intervalId = setInterval(() => {\n    i += 1;\n    if (i === numAmount) {\n      clearInterval(intervalId);\n\n      // Щоб кнопка активувалася з невеликим затриманням\n      setTimeout(() => {\n        btn.removeAttribute('disabled');\n      }, 1000);\n    }\n    createPromise(i, numDalay)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n  }, numStep);\n}\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$form","document","querySelector","$47d4ff9957288465$var$btn","addEventListener","evt","setAttribute","preventDefault","elements","delay","delay1","step","amount","currentTarget","numDalay","Number","value","numStep","numAmount","i","intervalId","setInterval","position","clearInterval","setTimeout","removeAttribute","Promise","resolve","reject","shouldResolve","Math","random","then","Notify","success","catch","failure"],"version":3,"file":"03-promises.304d70cd.js.map"}