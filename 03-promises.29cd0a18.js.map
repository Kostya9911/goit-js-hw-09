{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAOaC,SAASC,cAAc,QAQ/BC,iBAAiB,UAsBtB,SAAoBC,GAClBA,EAAIC,iBAKkD,IAEjCC,EAAjBF,EAAIG,cADNC,SAAYC,EAAKH,EAALI,MAAOC,EAAIL,EAAJK,KAAMC,EAAMN,EAANM,OAGvBC,EAAWC,OAAOL,EAAMM,OACxBC,EAAUF,OAAOH,EAAKI,OACtBE,EAAYH,OAAOF,EAAOG,OAC1BG,EAAI,EAEFC,EAAaC,aAAY,WA7BjC,IAAuBC,EAAUX,GA8B7BQ,GAAK,KACKD,GACRK,cAAcH,IAhCGE,EAkCLH,EAlCeR,EAkCZG,EAjCZ,IAAIU,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,WACLH,EACFF,EAAQ,CAAEH,WAAUX,UAEpBe,EAAO,CAAEJ,WAAUX,S,GAEpBA,E,KAyBAoB,MAAK,SAAAC,G,IAAGV,EAAQU,EAARV,SAAUX,EAAKqB,EAALrB,MACjBX,EAAAiC,OAAOC,QAAQ,uBAAwCC,OAAfb,EAAS,QAAYa,OAANxB,EAAM,M,IAE9DyB,OAAM,SAAAJ,G,IAAGV,EAAQU,EAARV,SAAUX,EAAKqB,EAALrB,MAClBX,EAAAiC,OAAOI,QAAQ,sBAAqCF,OAAfb,EAAS,QAAYa,OAANxB,EAAM,M,MAE7DM,E","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\n/**\n  |============================\n  | Змінні\n  |============================\n*/\nconst form = document.querySelector('form');\n\n/**\n  |============================\n  | Слухачі\n  |============================\n*/\n\nform.addEventListener('submit', formSubmit);\n\n/**\n  |============================\n  | Функції\n  |============================\n*/\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nfunction formSubmit(evt) {\n  evt.preventDefault();\n\n  // Питання! Нижче об`єкт - elements. Як йому передаються ключі delay, step, amount, та як JS розуміє де які елементи\n  // привязати до ключів. Я знаю шо так можна, але ж не зрозумілі правила.\n\n  const {\n    elements: { delay, step, amount },\n  } = evt.currentTarget;\n\n  let numDalay = Number(delay.value);\n  let numStep = Number(step.value);\n  let numAmount = Number(amount.value);\n  let i = 0;\n\n  const intervalId = setInterval(() => {\n    i += 1;\n    if (i === numAmount) {\n      clearInterval(intervalId);\n    }\n    createPromise(i, numDalay)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n  }, numStep);\n}\n"],"names":["$h6c0i","parcelRequire","document","querySelector","addEventListener","evt","preventDefault","_elements","currentTarget","elements","delay1","delay","step","amount","numDalay","Number","value","numStep","numAmount","i","intervalId","setInterval","position","clearInterval","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","then","param","Notify","success","concat","catch","failure"],"version":3,"file":"03-promises.29cd0a18.js.map"}