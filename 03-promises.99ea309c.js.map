{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAOaC,SAASC,cAAc,QAQ/BC,iBAAiB,UAsBtB,SAAoBC,GAClBA,EAAIC,iBAKkD,MACpDC,UAAYC,MAAAC,EAAKC,KAAEA,EAAIC,OAAEA,IACvBN,EAAIO,cAER,IAAIC,EAAWC,OAAOL,EAAMM,OACxBC,EAAUF,OAAOJ,EAAKK,OACtBE,EAAYH,OAAOH,EAAOI,OAC1BG,EAAI,EAER,MAAMC,EAAaC,aAAY,KA7BjC,IAAuBC,EAAUb,EA8B7BU,GAAK,EACDA,IAAMD,GACRK,cAAcH,IAhCGE,EAkCLH,EAlCeV,EAkCZK,EAjCZ,IAAIU,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,KACLH,EACFF,EAAQ,C,SAAEH,E,MAAUb,IAEpBiB,EAAO,C,SAAEJ,E,MAAUb,GAAQ,GAE5BA,EAAM,KAyBNsB,MAAK,EAACT,SAAEA,EAAQb,MAAEA,MACjBR,EAAA+B,OAAOC,QAAQ,uBAAqBX,QAAiBb,MAAU,IAEhEyB,OAAM,EAACZ,SAAEA,EAAQb,MAAEA,MAClBR,EAAA+B,OAAOG,QAAQ,sBAAoBb,QAAeb,MAAU,GAC5D,GACHQ,E","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\n/**\n  |============================\n  | Змінні\n  |============================\n*/\nconst form = document.querySelector('form');\n\n/**\n  |============================\n  | Слухачі\n  |============================\n*/\n\nform.addEventListener('submit', formSubmit);\n\n/**\n  |============================\n  | Функції\n  |============================\n*/\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nfunction formSubmit(evt) {\n  evt.preventDefault();\n\n  // Питання! Нижче об`єкт - elements. Як йому передаються ключі delay, step, amount, та як JS розуміє де які елементи\n  // привязати до ключів. Я знаю шо так можна, але ж не зрозумілі правила.\n\n  const {\n    elements: { delay, step, amount },\n  } = evt.currentTarget;\n\n  let numDalay = Number(delay.value);\n  let numStep = Number(step.value);\n  let numAmount = Number(amount.value);\n  let i = 0;\n\n  const intervalId = setInterval(() => {\n    i += 1;\n    if (i === numAmount) {\n      clearInterval(intervalId);\n    }\n    createPromise(i, numDalay)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n  }, numStep);\n}\n"],"names":["$iQIUW","parcelRequire","document","querySelector","addEventListener","evt","preventDefault","elements","delay","delay1","step","amount","currentTarget","numDalay","Number","value","numStep","numAmount","i","intervalId","setInterval","position","clearInterval","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","then","Notify","success","catch","failure"],"version":3,"file":"03-promises.99ea309c.js.map"}